"""
Django settings for test project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path
from django import urls
from django.utils import timezone

from elasticsearch import RequestsHttpConnection
from bleach.css_sanitizer import CSSSanitizer
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# for context processor
BASE_HTML = "django_forum/base.html"
SITE_NAME = "django_forum"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-1*lgqsqmt50224cmputddn-v+^k1d+zf$9rjhp^d+mqirdg!p*"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]


# Application definition

INSTALLED_APPS = [
    "django_forum",
    "django_messages",
    "django_profile",
    "django_users",
    "pipeline",
    "crispy_forms",
    "crispy_bootstrap5",
    "captcha",
    "django_q",
    "sorl.thumbnail",
    "tinymce",
    "django_elasticsearch_dsl",
    "django_email_verification",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.sites",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

if DEBUG:
    INSTALLED_APPS = INSTALLED_APPS + ["debug_toolbar"]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # "django.middleware.cache.UpdateCacheMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    # "django.middleware.cache.FetchFromCacheMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if DEBUG:
    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware"
    ] + MIDDLEWARE  # noqa: E0501

ROOT_URLCONF = "django_forum_project.urls"

LOGIN_URL = urls.reverse_lazy("django_users:login")
LOGIN_REDIRECT_URL = urls.reverse_lazy("django_users:profile")
LOGOUT_REDIRECT_URL = urls.reverse_lazy("django_users:login")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django_forum.context_processors.base_html",
                "django_forum.context_processors.site_name",
            ],
        },
    },
]

if DEBUG:
    TEMPLATES[0]["OPTIONS"]["context_processors"].append(
        "django.template.context_processors.debug"
    )

# WSGI_APPLICATION = "test.wsgi.application"

# debug toolbar
INTERNAL_IPS = [
    "127.0.0.1",
]


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": "/opt/ceramic_isles_test/db.sqlite3",
        "TEST": {
            "NAME": "testdb.sqlite3",
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    # },
    # {
    #     "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    # },
    # {
    #     "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    # },
    # {
    #     "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

FILES_ROOT = os.path.join(BASE_DIR, "files_root/")

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(FILES_ROOT, STATIC_URL)
if not os.path.isdir(STATIC_ROOT):
    raise (NotADirectoryError)

MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(FILES_ROOT, MEDIA_URL)
if not os.path.isdir(MEDIA_ROOT):
    raise (NotADirectoryError)

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# crispy bootstrap
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
CRISPY_FAIL_SILENTLY = not DEBUG


CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

# django-q
Q_CLUSTER = {
    "name": "DJRedis",
    "workers": 4,
    "timeout": 20,
    "retry": 60,
    "django_redis": "default",
}


# settings for bleach

ALLOWED_TAGS = [
    "a",
    "div",
    "p",
    "span",
    "img",
    "em",
    "i",
    "li",
    "ol",
    "ul",
    "strong",
    "br",
    "table",
    "tbody",
    "thead",
    "tr",
    "td",
    "abbr",
    "acronym",
    "b",
    "blockquote",
    "code",
    "strike",
    "u",
    "sup",
    "sub",
]

CSS_SANITIZER = CSSSanitizer(
    allowed_css_properties=[
        "background-color",
        "font-size",
        "line-height",
        "color",
        "font-family",
    ]
)

ATTRIBUTES = {
    "*": [
        "style",
        "align",
        "color",
    ],
    "a": [
        "href",
    ],
}

# tinymce
TINYMCE_DEFAULT_CONFIG = {
    "forced_root_block": "false",
    "menubar": "false",
    "min-height": "500px",
    "browser_spellcheck": "true",
    "contextmenu": "false",
    "plugins": "advlist autolink lists link image charmap print preview anchor searchreplace fullscreen insertdatetime media table paste code help wordcount spellchecker",
    "toolbar": "undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | forecolor backcolor casechange permanentpen formatpainter removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor | a11ycheck ltr rtl | showcomments addcomment table",
    "custom_undo_redo_levels": 10,
}

# softdeletion params

DELETION_TIMEOUT = {
    "POST": timezone.timedelta(days=21),
    "COMMENT": timezone.timedelta(days=14),
}


# django messages
# NUMBER_OF_MESSAGES_PER_PAGE = 6
ABSTRACTMESSAGE = True

# django_profile
ABSTRACTPROFILE = True

# django_forum
ABSTRACTPOST = False
COMMENT_WAIT = timezone.timedelta(seconds=60)  # normally ten minutes ie 600 seconds,
# to cover case where commenter deletes comment immediately after typing it

# pagination of posts in post list
NUMPOSTS = 5

SITE_DOMAIN = "http://127.0.0.1:8000"

# contrib.sites
SITE_ID = 1


# django_users
# DJANGO-EMAIL-VERIFICATION SETTINGS
def verified_callback(user):
    user.is_active = True


SUBSCRIBED_MSG = (
    '<h3 style="color: blue;"></h3><br>A new comment'
    "has been added to a post that you are subscribed"
    "to!<br>Follow this link to view the post and"
    "comments: {}"
)

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
# "django.core.mail.backends.locmem.EmailBackend"  # noqa: E501
EMAIL_VERIFIED_CALLBACK = verified_callback
EMAIL_ACTIVE_FIELD = "is_active"
EMAIL_HOST_USER = "test@django_users.com"
EMAIL_FROM_ADDRESS = "noreply@django_users.com"
EMAIL_MAIL_SUBJECT = "Confirm your email"
EMAIL_MAIL_HTML = "emails/mail_body.html"
EMAIL_MAIL_PLAIN = "emails/mail_body.txt"
EMAIL_MAIL_PAGE_TEMPLATE = "registration/confirm.html"
EMAIL_PAGE_DOMAIN = SITE_DOMAIN
EMAIL_MAIL_TOKEN_LIFE = 60 * 60 * 24

# RECAPTCHA SETTINGS
RECAPTCHA_PUBLIC_KEY = "6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI"
RECAPTCHA_PRIVATE_KEY = "6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe"

SILENCED_SYSTEM_CHECKS = ["captcha.recaptcha_test_key_error"]

SITE_NAME = "django_forum_test_app"

# Sorl-thumbnail
THUMBNAIL_FORMAT = "PNG"

# django-pipeline
STATICFILES_STORAGE = "pipeline.storage.PipelineStorage"

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "pipeline.finders.PipelineFinder",
)


default_stylesheet_extra_content = {
    "media": "all",
    "charset": "UTF-8",
    "title": None,
}

default_js_extra_content = {
    "async": True,
    "defer": False,
}

PIPELINE = {
    # "PIPELINE_COLLECTOR_ENABLED": True,
    # "PIPELINE_ENABLED": True,
    "JS_COMPRESSOR": "pipeline.compressors.jsmin.JSMinCompressor",
    "CSS_COMPRESSOR": "pipeline.compressors.csshtmljsminify.CssHtmlJsMinifyCompressor",  # noqa: E501
    "STYLESHEETS": {
        "main_styles": {
            "source_filenames": ("django_forum/css/styles.css",),
            "output_filename": "css/styles_min.css",
            "extra_context": default_stylesheet_extra_content,
        },
        "registration_styles": {
            "source_filenames": ("django_users/css/balloons.css",),
            "output_filename": "css/blns_min.css",
            "extra_context": default_stylesheet_extra_content,
        },
    },
    "JAVASCRIPT": {
        "forum_post_create": {
            "source_filenames": ("django_forum/js/post_create.js",),
            "output_filename": "django_forum/js/df_pc_min.js",
            "extra_context": default_js_extra_content,
        },
        "forum_post_detail": {
            "source_filenames": ("django_forum/js/post_detail.js",),
            "output_filename": "django_forum/js/df_pd_min.js",
            "extra_context": default_js_extra_content,
        },
        "forum_profile_update": {
            "source_filenames": (
                "django_forum/js/profile_update.js",
                "anchor.js",
            ),
            "output_filename": "django_forum/js/df_pu_min.js",
            "extra_context": default_js_extra_content,
        },
    },
}

pw = os.getenv("ELASTIC_PASSWORD")
http_auth = ("elastic", pw)

# elasticsearch
ELASTICSEARCH_DSL = {
    "default": {
        "hosts": ["https://localhost:9200"],
        "use_ssl": True,
        # "verify_certs": False,
        "http_auth": http_auth,
        "ca_certs": "/etc/certs/http_ca.crt",  # "/path/to/cert.crt",
        "connection_class": RequestsHttpConnection,
    },
}

#         "http_auth": ("user", "secret"),
#         "scheme": "https",
#         "port": "9200",
#     }
# }
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "handlers": {
#         "console": {
#             "class": "logging.StreamHandler",
#         },
#     },
#     "root": {
#         "handlers": ["console"],
#         "level": "WARNING",
#     },
# }


# logging
# def skip_mtime_seen(record):
#     if "mtime" in record.getMessage():  # filter whatever you want
#         return False
#     return True


# def skip_djangoq_schedule(record):
#     if "schedule" in record.getMessage():
#         return False
#     return True


# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "filters": {
#         # use Django's built in CallbackFilter to point to your filter
#         "skip_mtime_seen": {
#             "()": "django.utils.log.CallbackFilter",
#             "callback": skip_mtime_seen,
#         },
#         "skip_djangoq_schedule": {
#             "()": "django.utils.log.CallbackFilter",
#             "callback": skip_djangoq_schedule,
#         },
#     },
#     "formatters": {
#         "django": {
#             "()": "django.utils.log.ServerFormatter",
#             "format": "[{server_time}] - {pathname} - {message}",
#             "style": "{",
#         },
#         "verbose": {
#             "format": "{levelname} {asctime} {pathname} {module} {process:d} {thread:d} {message}",
#             "style": "{",
#         },
#     },
#     "handlers": {
#         "file": {
#             "level": "DEBUG",
#             "class": "logging.FileHandler",
#             "filename": "/opt/ceramic_isles_test/debug.log",
#             "formatter": "verbose",
#             "filters": ["skip_mtime_seen", "skip_djangoq_schedule"],
#         },
#         "console": {
#             "level": "ERROR",
#             "class": "logging.StreamHandler",
#             "formatter": "django",
#         },
#     },
#     "loggers": {
#         "django": {
#             "handlers": ["file"],
#             "propagate": True,
#             "level": "DEBUG",
#         },
#         "django_artisan": {
#             "handlers": ["file", "console"],
#             "level": "DEBUG",
#             "propagate": True,
#         },
#         "safe_imagefield": {
#             "handlers": ["file", "console"],
#             "level": "DEBUG",
#             "propagate": True,
#         },
#     },
# }
